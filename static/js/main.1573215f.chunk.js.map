{"version":3,"sources":["components/Header.js","helper.js","components/Form.js","components/Summary.js","components/Result.js","components/Spinner.js","App.js","reportWebVitals.js","index.js"],"names":["HeaderContainer","styled","header","HeaderText","h1","Header","title","firstLetterCap","text","charAt","toUpperCase","slice","Field","div","Label","label","Select","select","InputRadio","input","Button","button","Error","Form","setSummary","setLoading","useState","brand","year","plan","data","setData","error","setError","getData","e","target","name","value","onSubmit","preventDefault","trim","result","diference","Date","getFullYear","getYearDifference","increment","calculateBrand","planIncrease","getPlan","parseFloat","toFixed","setTimeout","quoter","Number","onChange","type","checked","SummaryContainer","Summary","Message","p","QuoterResult","QuoterText","Result","Spinner","className","Container","FormContainer","App","summary","loading","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1573215f.chunk.js","sourcesContent":["import React from \"react\"\nimport styled from \"@emotion/styled\"\nimport PropTypes from \"prop-types\"\n\n\nconst HeaderContainer = styled.header`\n    background-color: #26C6DA;\n    padding: 10px;\n    font-weigth: bold;\n    color: #FFFFFF;\n`\n\nconst HeaderText = styled.h1`\n    font-size: 2rem;\n    margin: 0;\n    font-family: 'Slabo 27px', serif;\n    text-align: center;\n`\n\nconst Header = ({title}) => {\n    return (  \n        <HeaderContainer>\n            <HeaderText>{title}</HeaderText>\n        </HeaderContainer>\n    )\n}\n\nHeader.propTypes = {\n    title: PropTypes.string.isRequired\n}\n \nexport default Header","// Year Difference\nexport const getYearDifference = (year) => new Date().getFullYear() - year\n\n// Total to pay according to the brand\nexport const calculateBrand = (brand) => {\n    let increment\n\n    switch(brand) {\n        case \"european\":\n            increment = 1.3\n            break\n        case \"american\":\n            increment = 1.15\n            break\n        case \"asian\":\n            increment = 1.05\n            break\n        default:\n            break\n    }\n    return increment\n}\n\n// Calculate type of insurance\nexport const getPlan = (plan) => (plan === \"basic\") ? 1.20 : 1.50\n\n// First letter Caps\nexport const firstLetterCap = (text) => text.charAt(0).toUpperCase() + text.slice(1)","import React, {useState} from \"react\"\nimport styled from \"@emotion/styled\"\nimport PropTypes from \"prop-types\"\nimport {getYearDifference, calculateBrand, getPlan} from \"../helper\"\n\n\nconst Field = styled.div`\n    display: flex;\n    margin-bottom: 1rem;\n    align-items: center;\n`\n\nconst Label = styled.label`\n    flex: 0 0 100px\n`\n\nconst Select = styled.select`\n    display: block;\n    width: 100%;\n    padding: 1rem;\n    border: 1px solid #e1e1e1;\n    -webkit-appearance: none;\n`\n\nconst InputRadio = styled.input`\n    margin: 0 1rem;\n`\nconst Button = styled.button`\n    background-color: #00838F;\n    font-size: 16px;\n    width: 100%;\n    padding: 1rem;\n    color: #fff;\n    text-transform: uppercase;\n    font-weight: bold;\n    border: none;\n    transition: background-color .3s ease;\n    margin-top: 2rem;\n\n    &:hover {\n        background-color: #26C6DA;\n        cursor: pointer;\n    }\n`\n\nconst Error = styled.div`\n    background-color: red;\n    color: white;\n    padding: 1rem;\n    width: 100%;\n    text-align: center;\n    margin-bottom: 2rem;\n`\n\nconst Form = ({setSummary, setLoading}) => {\n\n    const [data, setData] = useState({\n        brand: \"\",\n        year: \"\",\n        plan: \"\"\n    })\n\n    const [error, setError] = useState(false)\n\n    // Extract state values\n    const {brand, year, plan} = data\n\n    // Put form data in state\n    const getData = e => {\n        setData({\n            ...data,\n            [e.target.name] : e.target.value\n        })\n    }\n\n    // Handle submit\n    const handleQuote = e => {\n        e.preventDefault()\n\n        if(brand.trim() === \"\" || year.trim() === \"\" || plan.trim() === \"\") {\n            setError(true)\n            return\n        }\n        setError(false)\n\n        // 2000 base\n        let result = 2000\n\n        // Get Year Difference\n        const diference = getYearDifference(year)\n\n        // Subtract 3% each year \n        result -= (( diference * 3 ) * result) / 100\n\n        // American 15%, Asian 5%, European 30%\n        result = calculateBrand(brand) * result\n\n        // Increase according to plan (Basic 20%, Complete 50%)\n        const planIncrease = getPlan(plan)\n        result = parseFloat(planIncrease * result).toFixed(2)\n\n        // Handle Loading Spinner \n        setLoading(true)\n\n        setTimeout(() => {\n            setLoading(false)\n            setSummary({\n                quoter: Number(result),\n                data\n            })\n        }, 3000)\n\n    }\n\n    return ( \n\n        <form\n            onSubmit={handleQuote}\n        >\n            {error ? <Error>All fields are mandatory</Error> : null}\n\n            <Field>\n                <Label>Brand</Label>\n                <Select\n                    name=\"brand\"\n                    value={brand}\n                    onChange={getData}\n                >\n                    <option value=\"\">-- Select --</option>\n                    <option value=\"american\">American</option>\n                    <option value=\"european\">European</option>\n                    <option value=\"asian\">Asian</option>\n                </Select>\n            </Field>\n            <Field>\n                <Label>Year</Label>\n                <Select\n                    name=\"year\"\n                    value={year}\n                    onChange={getData}\n                >\n                    <option value=\"\">-- Select --</option>\n                    <option value=\"2021\">2021</option>\n                    <option value=\"2020\">2020</option>\n                    <option value=\"2019\">2019</option>\n                    <option value=\"2018\">2018</option>\n                    <option value=\"2017\">2017</option>\n                    <option value=\"2016\">2016</option>\n                    <option value=\"2015\">2015</option>\n                    <option value=\"2014\">2014</option>\n                    <option value=\"2013\">2013</option>\n                    <option value=\"2012\">2012</option>\n                </Select>\n            </Field>\n            <Field>\n                <Label>Plan</Label>\n                <InputRadio \n                    type=\"radio\"\n                    name=\"plan\"\n                    value=\"basic\"\n                    checked={plan === \"basic\"}\n                    onChange={getData}\n                /> Basic\n                \n                <InputRadio \n                    type=\"radio\"\n                    name=\"plan\"\n                    value=\"complete\"\n                    checked={plan === \"complete\"}\n                    onChange={getData}\n                /> Complete\n            </Field>\n            <Button type=\"submit\">Quote</Button>\n        </form>\n\n    )\n}\n\nForm.propTypes = {\n    setSummary: PropTypes.func.isRequired,\n    setLoading: PropTypes.func.isRequired\n}\n\nexport default Form","import React from 'react'\nimport styled from \"@emotion/styled\"\nimport PropTypes from \"prop-types\"\nimport {firstLetterCap} from \"../helper\"\n\n\nconst SummaryContainer = styled.div`\n    padding: 1rem;\n    text-align: center;\n    background-color: #00838F;\n    color: #FFF;\n    margin-top: 1rem;\n`\n\nconst Summary = ({data}) => {\n\n    // Get from data\n    const {brand, year, plan} = data\n\n    if (brand === \"\" || year === \"\" || plan === \"\") return null\n\n    return (\n        <SummaryContainer>\n            <h2>Quoter Summary</h2>\n            <ul>\n                <li>Brand: {firstLetterCap(brand)}</li>\n                <li>Plan: {firstLetterCap(plan)}</li>\n                <li>Year: {year}</li>\n            </ul>\n        </SummaryContainer>\n    )\n}\n\nSummary.propTypes = {\n    data: PropTypes.object.isRequired\n}\n \nexport default Summary","import React from 'react'\nimport styled from \"@emotion/styled\"\nimport PropTypes from \"prop-types\"\n\n\nconst Message = styled.p`\n    background-color: rgb(127, 224, 237);\n    marging-top: 2rem;\n    text-align: center;\n`\n\nconst QuoterResult = styled.div`\n    text-align: center;\n    padding: 0.5rem;\n    border: 1px solid #26C6DA;\n    background-color: rgb(127, 224, 237);\n    margin-top: 1rem;\n    position: relative;\n`\n\nconst QuoterText = styled.p`\n    color: #00838F;\n    padding: 1rem;\n    text-transform: uppercase;\n    font-weight: bold;\n    margin: 0;\n`\n\nconst Result = ({quoter}) => {\n\n    return (\n        (quoter === 0) ? <Message>Select a brand, year, and car type</Message> \n        : \n            (\n                <QuoterResult>\n                    <QuoterText>The total is: ${quoter}</QuoterText>\n                </QuoterResult>\n            )\n    )\n\n}\n \nResult.propTypes = {\n    quoter: PropTypes.number.isRequired\n}\n\nexport default Result\n\n","import React from 'react'\nimport \"./Spinner.css\"\n\n\nconst Spinner = () => {\n\n    return (\n        <div className=\"sk-circle\">\n            <div className=\"sk-circle1 sk-child\"></div>\n            <div className=\"sk-circle2 sk-child\"></div>\n            <div className=\"sk-circle3 sk-child\"></div>\n            <div className=\"sk-circle4 sk-child\"></div>\n            <div className=\"sk-circle5 sk-child\"></div>\n            <div className=\"sk-circle6 sk-child\"></div>\n            <div className=\"sk-circle7 sk-child\"></div>\n            <div className=\"sk-circle8 sk-child\"></div>\n            <div className=\"sk-circle9 sk-child\"></div>\n            <div className=\"sk-circle10 sk-child\"></div>\n            <div className=\"sk-circle11 sk-child\"></div>\n            <div className=\"sk-circle12 sk-child\"></div>\n        </div>\n    )\n}\n \nexport default Spinner","import React, {useState} from \"react\"\nimport Header from \"./components/Header\"\nimport Form from \"./components/Form\"\nimport Summary from \"./components/Summary\"\nimport Result from \"./components/Result\"\nimport Spinner from \"./components/Spinner\"\n\nimport styled from \"@emotion/styled\"\n\n\nconst Container = styled.div`\n  max-width: 600px;\n  margin: 0 auto;\n`\n\nconst FormContainer = styled.div`\n  background-color: #FFF;\n  padding: 3rem;\n`\n\nfunction App() {\n  const [summary, setSummary] = useState({\n    quoter: 0,\n    data: {\n      brand: \"\",\n      year: \"\",\n      plan: \"\"\n    }\n  })\n\n  const [loading, setLoading] = useState(false)\n\n  // Get data\n  const {quoter,data} = summary\n\n  return (\n    <Container>\n      <Header \n        title=\"Insurance Quote\"\n      />\n\n      <FormContainer>\n        <Form \n          setSummary={setSummary}\n          setLoading={setLoading}\n        />\n\n        {loading ? <Spinner /> : null}\n\n        { !loading ? \n            <Summary \n              data = {data}\n            /> : null\n        }\n\n        { !loading ? \n            <Result \n              quoter={quoter}\n            /> : null\n        }\n\n      </FormContainer>\n    </Container> \n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}